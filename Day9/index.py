import mysql.connector
from mysql.connector import Error
import sys

class ProjectProgressManager:
    def __init__(self):
        """Kh·ªüi t·∫°o k·∫øt n·ªëi MySQL"""
        self.connection = None
        self.cursor = None
        
    def connect_to_mysql(self, host='localhost', user='root', password=''):
        """K·∫øt n·ªëi ƒë·∫øn MySQL server"""
        try:
            self.connection = mysql.connector.connect(
                host=host,
                user=user,
                password=password
            )
            self.cursor = self.connection.cursor()
            print("‚úì K·∫øt n·ªëi MySQL th√†nh c√¥ng!")
            return True
        except Error as e:
            print(f"‚úó L·ªói k·∫øt n·ªëi MySQL: {e}")
            return False
    
    def setup_database(self):
        """
        T·∫°o c∆° s·ªü d·ªØ li·ªáu v√† c√°c b·∫£ng c·∫ßn thi·∫øt
        - T·∫°o database project_progress
        - T·∫°o b·∫£ng members v√† weekly_progress
        """
        try:
     
            self.cursor.execute("CREATE DATABASE IF NOT EXISTS project_progress")
            print("‚úì Database 'project_progress' ƒë√£ ƒë∆∞·ª£c t·∫°o/ki·ªÉm tra")
      
            self.cursor.execute("USE project_progress")
            
       
            create_members_table = """
            CREATE TABLE IF NOT EXISTS members (
                member_id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                role VARCHAR(50) NOT NULL
            )
            """
            self.cursor.execute(create_members_table)
            print("‚úì B·∫£ng 'members' ƒë√£ ƒë∆∞·ª£c t·∫°o/ki·ªÉm tra")
            
         
            create_progress_table = """
            CREATE TABLE IF NOT EXISTS weekly_progress (
                progress_id INT AUTO_INCREMENT PRIMARY KEY,
                member_id INT NOT NULL,
                week_number INT NOT NULL,
                hours_worked FLOAT NOT NULL CHECK (hours_worked >= 0),
                tasks_completed INT NOT NULL DEFAULT 0,
                notes TEXT,
                FOREIGN KEY (member_id) REFERENCES members(member_id) ON DELETE CASCADE
            )
            """
            self.cursor.execute(create_progress_table)
            print("‚úì B·∫£ng 'weekly_progress' ƒë√£ ƒë∆∞·ª£c t·∫°o/ki·ªÉm tra")
            
            self.connection.commit()
            return True
            
        except Error as e:
            print(f"‚úó L·ªói t·∫°o database/b·∫£ng: {e}")
            return False
    
    def add_data(self):
        """
        Th√™m d·ªØ li·ªáu m·∫´u v√†o c√°c b·∫£ng
        - Th√™m 5 th√†nh vi√™n
        - Th√™m 10+ b·∫£n ghi ti·∫øn ƒë·ªô qua 2 tu·∫ßn
        """
        try:

            self.cursor.execute("SELECT COUNT(*) FROM members")
            member_count = self.cursor.fetchone()[0]
            
            if member_count == 0:
              
                members_data = [
                    ('Nguy·ªÖn VƒÉn An', 'Developer'),
                    ('Tr·∫ßn Th·ªã B√¨nh', 'Designer'),
                    ('L√™ VƒÉn C∆∞·ªùng', 'Tester'),
                    ('Ph·∫°m Th·ªã Dung', 'Project Manager'),
                    ('Ho√†ng VƒÉn Em', 'DevOps')
                ]
                
                insert_member_query = "INSERT INTO members (name, role) VALUES (%s, %s)"
                self.cursor.executemany(insert_member_query, members_data)
                print(f"‚úì ƒê√£ th√™m {len(members_data)} th√†nh vi√™n")
            else:
                print("‚úì D·ªØ li·ªáu th√†nh vi√™n ƒë√£ t·ªìn t·∫°i")
       
            self.cursor.execute("SELECT COUNT(*) FROM weekly_progress")
            progress_count = self.cursor.fetchone()[0]
            
            if progress_count == 0:

                progress_data = [
  
                    (1, 1, 40.5, 8, 'Ho√†n th√†nh module ƒëƒÉng nh·∫≠p'),
                    (2, 1, 35.0, 6, 'Thi·∫øt k·∫ø giao di·ªán ch√≠nh'),
                    (3, 1, 42.0, 12, 'Test c√°c ch·ª©c nƒÉng c∆° b·∫£n'),
                    (4, 1, 38.5, 5, 'Qu·∫£n l√Ω ti·∫øn ƒë·ªô d·ª± √°n'),
                    (5, 1, 45.0, 7, 'C·∫•u h√¨nh server v√† database'),
                    
             
                    (1, 2, 44.0, 10, 'Ph√°t tri·ªÉn API REST'),
                    (2, 2, 40.0, 8, 'Ho√†n thi·ªán UI/UX'),
                    (3, 2, 38.5, 15, 'Ki·ªÉm tra t√≠ch h·ª£p h·ªá th·ªëng'),
                    (4, 2, 42.0, 6, 'L·∫≠p k·∫ø ho·∫°ch sprint ti·∫øp theo'),
                    (5, 2, 41.5, 9, 'Tri·ªÉn khai m√¥i tr∆∞·ªùng production'),
                    
   
                    (1, 3, 36.0, 7, 'T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t'),
                    (3, 3, 40.0, 11, 'Regression testing')
                ]
                
                insert_progress_query = """
                INSERT INTO weekly_progress (member_id, week_number, hours_worked, tasks_completed, notes) 
                VALUES (%s, %s, %s, %s, %s)
                """
                self.cursor.executemany(insert_progress_query, progress_data)
                print(f"‚úì ƒê√£ th√™m {len(progress_data)} b·∫£n ghi ti·∫øn ƒë·ªô")
            else:
                print("‚úì D·ªØ li·ªáu ti·∫øn ƒë·ªô ƒë√£ t·ªìn t·∫°i")
            
            self.connection.commit()
            return True
            
        except Error as e:
            print(f"‚úó L·ªói th√™m d·ªØ li·ªáu: {e}")
            self.connection.rollback()
            return False
    
    def query_progress(self, week_number):
        """
        Truy v·∫•n ti·∫øn ƒë·ªô c·ªßa m·ªôt tu·∫ßn c·ª• th·ªÉ
        S·ª≠ d·ª•ng JOIN, WHERE, ORDER BY, LIMIT
        """
        try:
            query = """
            SELECT m.name, wp.hours_worked, wp.tasks_completed, wp.notes
            FROM members m
            JOIN weekly_progress wp ON m.member_id = wp.member_id
            WHERE wp.week_number = %s
            ORDER BY wp.tasks_completed DESC
            LIMIT 5
            """
            
            self.cursor.execute(query, (week_number,))
            results = self.cursor.fetchall()
            
            if results:
                print(f"\nüìä Tu·∫ßn {week_number}:")
                for name, hours, tasks, notes in results:
                    print(f"- {name}: {hours} gi·ªù, {tasks} nhi·ªám v·ª•, Ghi ch√∫: {notes}")
            else:
                print(f"‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu cho tu·∫ßn {week_number}")
            
            return results
            
        except Error as e:
            print(f"‚úó L·ªói truy v·∫•n ti·∫øn ƒë·ªô: {e}")
            return []
    
    def update_progress(self, progress_id, new_hours, new_notes):
        """
        C·∫≠p nh·∫≠t th√¥ng tin ti·∫øn ƒë·ªô c·ªßa m·ªôt b·∫£n ghi c·ª• th·ªÉ
        S·ª≠ d·ª•ng UPDATE v√† WHERE
        """
        try:
        
            check_query = "SELECT COUNT(*) FROM weekly_progress WHERE progress_id = %s"
            self.cursor.execute(check_query, (progress_id,))
            
            if self.cursor.fetchone()[0] == 0:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n ghi v·ªõi ID {progress_id}")
                return False
            
     
            update_query = """
            UPDATE weekly_progress 
            SET hours_worked = %s, notes = %s 
            WHERE progress_id = %s
            """
            
            self.cursor.execute(update_query, (new_hours, new_notes, progress_id))
            self.connection.commit()
            
            if self.cursor.rowcount > 0:
                print(f"‚úì ƒê√£ c·∫≠p nh·∫≠t b·∫£n ghi ID {progress_id}: {new_hours} gi·ªù, ghi ch√∫: '{new_notes}'")
                return True
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b·∫£n ghi ID {progress_id}")
                return False
                
        except Error as e:
            print(f"‚úó L·ªói c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô: {e}")
            self.connection.rollback()
            return False
    
    def delete_progress(self, week_number):
        """
        X√≥a t·∫•t c·∫£ b·∫£n ghi ti·∫øn ƒë·ªô c·ªßa m·ªôt tu·∫ßn c·ª• th·ªÉ
        S·ª≠ d·ª•ng DELETE v√† WHERE
        """
        try:
         
            check_query = "SELECT COUNT(*) FROM weekly_progress WHERE week_number = %s"
            self.cursor.execute(check_query, (week_number,))
            count = self.cursor.fetchone()[0]
            
            if count == 0:
                print(f"‚ùå Kh√¥ng c√≥ b·∫£n ghi n√†o c·ªßa tu·∫ßn {week_number} ƒë·ªÉ x√≥a")
                return False
            
       
            delete_query = "DELETE FROM weekly_progress WHERE week_number = %s"
            self.cursor.execute(delete_query, (week_number,))
            self.connection.commit()
            
            deleted_count = self.cursor.rowcount
            print(f"‚úì ƒê√£ x√≥a {deleted_count} b·∫£n ghi c·ªßa tu·∫ßn {week_number}")
            return True
            
        except Error as e:
            print(f"‚úó L·ªói x√≥a d·ªØ li·ªáu: {e}")
            self.connection.rollback()
            return False
    
    def generate_summary(self):
        """
        T·∫°o b√°o c√°o t·ªïng k·∫øt cho t·∫•t c·∫£ th√†nh vi√™n
        S·ª≠ d·ª•ng SELECT, JOIN, GROUP BY
        """
        try:
            query = """
            SELECT m.name, 
                   SUM(wp.hours_worked) as total_hours, 
                   SUM(wp.tasks_completed) as total_tasks
            FROM members m
            LEFT JOIN weekly_progress wp ON m.member_id = wp.member_id
            GROUP BY m.member_id, m.name
            ORDER BY total_hours DESC
            """
            
            self.cursor.execute(query)
            results = self.cursor.fetchall()
            
            print("\nüìà B√°o c√°o t·ªïng k·∫øt:")
            for name, total_hours, total_tasks in results:
                hours = total_hours if total_hours else 0
                tasks = total_tasks if total_tasks else 0
                print(f"- {name}: T·ªïng {hours} gi·ªù, {tasks} nhi·ªám v·ª•")
            
            return results
            
        except Error as e:
            print(f"‚úó L·ªói t·∫°o b√°o c√°o: {e}")
            return []
    
    def cleanup_database(self, confirm=False):
        """
        X√≥a b·∫£ng weekly_progress n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        S·ª≠ d·ª•ng DROP TABLE
        """
        try:
            if not confirm:
                response = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b·∫£ng 'weekly_progress'? (y/N): ")
                if response.lower() != 'y':
                    print("H·ªßy b·ªè thao t√°c x√≥a b·∫£ng")
                    return False
            check_query = """
            SELECT COUNT(*) 
            FROM information_schema.tables 
            WHERE table_schema = 'project_progress' 
            AND table_name = 'weekly_progress'
            """
            self.cursor.execute(check_query)
            if self.cursor.fetchone()[0] == 0:
                print("B·∫£ng 'weekly_progress' kh√¥ng t·ªìn t·∫°i")
                return False
            self.cursor.execute("DROP TABLE weekly_progress")
            self.connection.commit()
            print("ƒê√£ x√≥a b·∫£ng 'weekly_progress'")
            return True
        except Error as e:
            print(f"L·ªói x√≥a b·∫£ng: {e}")
            return False
    
    def close_connection(self):
        """ƒê√≥ng k·∫øt n·ªëi database"""
        try:
            if self.cursor:
                self.cursor.close()
            if self.connection and self.connection.is_connected():
                self.connection.close()
                print("‚úì ƒê√£ ƒë√≥ng k·∫øt n·ªëi MySQL")
        except Error as e:
            print(f"‚úó L·ªói ƒë√≥ng k·∫øt n·ªëi: {e}")


def main():
    """
    H√†m ch√≠nh - ch·∫°y to√†n b·ªô h·ªá th·ªëng qu·∫£n l√Ω ti·∫øn ƒë·ªô d·ª± √°n
    """
    print("üöÄ Kh·ªüi ƒë·ªông H·ªá th·ªëng Qu·∫£n l√Ω Ti·∫øn ƒë·ªô D·ª± √°n H√†ng tu·∫ßn")
    print("=" * 60)
    

    manager = ProjectProgressManager()
    
    try:

        print("\nüì° B∆Ø·ªöC 1: K·∫øt n·ªëi MySQL")
        if not manager.connect_to_mysql(
            host='localhost',
            user='root',
            password='' 
        ):
            print("‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c do l·ªói k·∫øt n·ªëi")
            return
        

        print("\nüèóÔ∏è  B∆Ø·ªöC 2: T·∫°o Database v√† B·∫£ng")
        if not manager.setup_database():
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o database/b·∫£ng")
            return
        
        
        print("\nüìù B∆Ø·ªöC 3: Th√™m D·ªØ li·ªáu M·∫´u")
        manager.add_data()

        print("\nüîç B∆Ø·ªöC 4: Truy v·∫•n Ti·∫øn ƒë·ªô")
        manager.query_progress(1)
        manager.query_progress(2)
        

        print("\n‚úèÔ∏è  B∆Ø·ªöC 5: C·∫≠p nh·∫≠t D·ªØ li·ªáu")
        manager.update_progress(1, 45.0, "Ho√†n th√†nh s·ªõm h∆°n d·ª± ki·∫øn")
        
     
        print("\nüóëÔ∏è  B∆Ø·ªöC 6: X√≥a D·ªØ li·ªáu")
        manager.delete_progress(3)
        
   
        print("\nüìä B∆Ø·ªöC 7: B√°o c√°o T·ªïng k·∫øt")
        manager.generate_summary()
        

        print("B∆Ø·ªöC 8: D·ªçn d·∫πp (T√πy ch·ªçn)")
        dapan = input("B·∫°n c√≥ mu·ªën x√≥a b·∫£ng weekly_progress kh√¥ng? (y/N): ")
        if dapan.lower() == 'y':
            manager.cleanup_database(confirm=True)
        print("Ho√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc!")
        
        print("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Ch∆∞∆°ng tr√¨nh b·ªã ng·∫Øt b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
    finally:
        # ƒê√≥ng k·∫øt n·ªëi
        manager.close_connection()
        print("\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng!")


if __name__ == "__main__":
    main()
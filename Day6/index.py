import os
import glob

# Constants
FILE_PREFIX = "tu·∫ßn"
FILE_SUFFIX = ".txt"

# --- Input and Validation Helper Functions ---

def get_int_input(prompt: str, error_message: str = "L·ªói: Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n.", min_value: int = None) -> int:
    """L·∫•y ƒë·∫ßu v√†o l√† s·ªë nguy√™n t·ª´ ng∆∞·ªùi d√πng v·ªõi validation."""
    while True:
        try:
            value = int(input(prompt))
            if min_value is not None and value < min_value:
                raise ValueError(f"Gi√° tr·ªã ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng {min_value}.")
            return value
        except ValueError as e:
            print(f"{error_message} ({e})")

def get_float_input(prompt: str, error_message: str = "L·ªói: Vui l√≤ng nh·∫≠p m·ªôt s·ªë th·ª±c.", min_value: float = None) -> float:
    """L·∫•y ƒë·∫ßu v√†o l√† s·ªë th·ª±c t·ª´ ng∆∞·ªùi d√πng v·ªõi validation."""
    while True:
        try:
            value = float(input(prompt))
            if min_value is not None and value < min_value:
                raise ValueError(f"Gi√° tr·ªã ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng {min_value}.")
            return value
        except ValueError as e:
            print(f"{error_message} ({e})")

def get_string_input(prompt: str, error_message: str = "L·ªói: N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.") -> str:
    """L·∫•y ƒë·∫ßu v√†o l√† chu·ªói kh√¥ng r·ªóng t·ª´ ng∆∞·ªùi d√πng."""
    while True:
        value = input(prompt)
        if value.strip():
            return value
        print(error_message)

def get_week_number_input(prompt: str) -> int:
    """L·∫•y s·ªë tu·∫ßn h·ª£p l·ªá t·ª´ ng∆∞·ªùi d√πng."""
    return get_int_input(prompt, min_value=1, error_message="L·ªói: S·ªë tu·∫ßn ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng.")

# --- Core Logic Functions ---

def create_weekly_log():
    """T·∫°o nh·∫≠t k√Ω tu·∫ßn m·ªõi v√† l∆∞u v√†o file vƒÉn b·∫£n."""
    print("\n--- T·∫°o Nh·∫≠t K√Ω Tu·∫ßn M·ªõi ---")
    week = get_week_number_input("Nh·∫≠p s·ªë tu·∫ßn: ")
    hours = get_float_input("Nh·∫≠p s·ªë gi·ªù l√†m vi·ªác: ", min_value=0)
    tasks = get_int_input("Nh·∫≠p s·ªë nhi·ªám v·ª• ho√†n th√†nh: ", min_value=0)
    notes = get_string_input("Nh·∫≠p ghi ch√∫: ")

    filename = f"{FILE_PREFIX}{week}{FILE_SUFFIX}"
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"Tu·∫ßn: {week}\n")
            f.write(f"S·ªë gi·ªù l√†m vi·ªác: {hours}\n")
            f.write(f"Nhi·ªám v·ª• ho√†n th√†nh: {tasks}\n")
            f.write(f"Ghi ch√∫: {notes}\n")
        print(f"\033[92mƒê√£ t·∫°o th√†nh c√¥ng nh·∫≠t k√Ω tu·∫ßn {week} ({filename})\033[0m") # Green color for success
    except IOError as e:
        print(f"\033[91mL·ªói khi ghi file: {e}\033[0m") # Red color for error

def read_weekly_log():
    """ƒê·ªçc n·ªôi dung m·ªôt nh·∫≠t k√Ω tu·∫ßn."""
    print("\n--- ƒê·ªçc Nh·∫≠t K√Ω Tu·∫ßn ---")
    week = get_week_number_input("Nh·∫≠p s·ªë tu·∫ßn c·∫ßn ƒë·ªçc: ")
    filename = f"{FILE_PREFIX}{week}{FILE_SUFFIX}"

    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                print(f"\n=== NH·∫¨T K√ù TU·∫¶N {week} ===")
                print(f.read().strip())
                print("=======================")
        else:
            print(f"\033[93mNh·∫≠t k√Ω tu·∫ßn {week} kh√¥ng t·ªìn t·∫°i.\033[0m") # Yellow color for warning
    except IOError as e:
        print(f"\033[91mL·ªói khi ƒë·ªçc file: {e}\033[0m")

def update_weekly_log():
    """C·∫≠p nh·∫≠t n·ªôi dung nh·∫≠t k√Ω tu·∫ßn (ghi ƒë√® to√†n b·ªô)."""
    print("\n--- C·∫≠p Nh·∫≠t Nh·∫≠t K√Ω Tu·∫ßn ---")
    week = get_week_number_input("Nh·∫≠p s·ªë tu·∫ßn c·∫ßn c·∫≠p nh·∫≠t: ")
    filename = f"{FILE_PREFIX}{week}{FILE_SUFFIX}"

    if not os.path.exists(filename):
        print(f"\033[93mNh·∫≠t k√Ω tu·∫ßn {week} kh√¥ng t·ªìn t·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t.\033[0m")
        create_new = get_string_input(f"B·∫°n c√≥ mu·ªën t·∫°o m·ªõi nh·∫≠t k√Ω cho tu·∫ßn {week} kh√¥ng? (y/n): ").lower()
        if create_new == 'y':
            create_weekly_log() # G·ªçi l·∫°i h√†m t·∫°o n·∫øu ng∆∞·ªùi d√πng mu·ªën
        return

    print(f"\nüîÑ Nh·∫≠p th√¥ng tin m·ªõi cho tu·∫ßn {week} (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng mu·ªën thay ƒë·ªïi m·ªôt m·ª•c c·ª• th·ªÉ):")
    # ƒê·ªçc n·ªôi dung c≈© ƒë·ªÉ hi·ªÉn th·ªã ho·∫∑c gi·ªØ l·∫°i n·∫øu ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p m·ªõi
    try:
        with open(filename, 'r', encoding='utf-8') as f_read:
            lines = f_read.readlines()
            current_hours_str = lines[1].split(": ")[1].strip()
            current_tasks_str = lines[2].split(": ")[1].strip()
            current_notes = lines[3].split(": ")[1].strip() if len(lines) > 3 else ""
    except (IOError, IndexError) as e:
        print(f"\033[91mL·ªói khi ƒë·ªçc file hi·ªán t·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t: {e}\033[0m")
        return

    new_hours_str = input(f"S·ªë gi·ªù l√†m vi·ªác (hi·ªán t·∫°i: {current_hours_str}): ")
    hours = float(new_hours_str) if new_hours_str.strip() else float(current_hours_str)
    
    new_tasks_str = input(f"S·ªë nhi·ªám v·ª• ho√†n th√†nh (hi·ªán t·∫°i: {current_tasks_str}): ")
    tasks = int(new_tasks_str) if new_tasks_str.strip() else int(current_tasks_str)

    new_notes = input(f"Ghi ch√∫ (hi·ªán t·∫°i: {current_notes}): ")
    notes = new_notes.strip() if new_notes.strip() else current_notes

    try:
        with open(filename, 'w', encoding='utf-8') as f_write:
            f_write.write(f"Tu·∫ßn: {week}\n")
            f_write.write(f"S·ªë gi·ªù l√†m vi·ªác: {hours}\n")
            f_write.write(f"Nhi·ªám v·ª• ho√†n th√†nh: {tasks}\n")
            f_write.write(f"Ghi ch√∫: {notes}\n")
        print(f"\033[92mƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng nh·∫≠t k√Ω tu·∫ßn {week}\033[0m")
    except IOError as e:
        print(f"\033[91mL·ªói khi ghi file c·∫≠p nh·∫≠t: {e}\033[0m")

def delete_weekly_log():
    """X√≥a t·ªáp nh·∫≠t k√Ω tu·∫ßn."""
    print("\n--- X√≥a Nh·∫≠t K√Ω Tu·∫ßn ---")
    week = get_week_number_input("Nh·∫≠p s·ªë tu·∫ßn c·∫ßn x√≥a: ")
    filename = f"{FILE_PREFIX}{week}{FILE_SUFFIX}"

    if os.path.exists(filename):
        confirm = get_string_input(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh·∫≠t k√Ω tu·∫ßn {week} ({filename}) kh√¥ng? (y/n): ").lower()
        if confirm == 'y':
            try:
                os.remove(filename)
                print(f"\033[92mƒê√£ x√≥a th√†nh c√¥ng nh·∫≠t k√Ω tu·∫ßn {week}\033[0m")
            except OSError as e:
                print(f"\033[91mL·ªói khi x√≥a file: {e}\033[0m")
        else:
            print("H·ªßy b·ªè thao t√°c x√≥a.")
    else:
        print(f"\033[93mKh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω tu·∫ßn {week} ƒë·ªÉ x√≥a.\033[0m")

def generate_summary():
    """T·∫°o b√°o c√°o t·ªïng k·∫øt t·ª´ c√°c file nh·∫≠t k√Ω."""
    print("\n--- B√°o C√°o T·ªïng K·∫øt ---")
    total_weeks = 0
    total_hours = 0.0
    total_tasks = 0
    log_files = sorted(glob.glob(f"{FILE_PREFIX}*{FILE_SUFFIX}")) # S·∫Øp x·∫øp file theo t√™n

    if not log_files:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu nh·∫≠t k√Ω n√†o ƒë·ªÉ t·∫°o b√°o c√°o.")
        return

    print(f"{'File Nh·∫≠t K√Ω':<20} | {'Tu·∫ßn':<5} | {'Gi·ªù LV':<7} | {'N.V·ª• HT':<8}")
    print("-" * 55)

    for filename in log_files:
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                if len(lines) < 3:
                    print(f"\033[91mB·ªè qua file l·ªói ƒë·ªãnh d·∫°ng: {filename}\033[0m")
                    continue
                
                week_str = lines[0].split(": ")[1].strip()
                hours_str = lines[1].split(": ")[1].strip()
                tasks_str = lines[2].split(": ")[1].strip()

                week = int(week_str)
                hours = float(hours_str)
                tasks = int(tasks_str)

                print(f"{filename:<20} | {week:<5} | {hours:<7.1f} | {tasks:<8}")
                total_weeks += 1
                total_hours += hours
                total_tasks += tasks
        except (IOError, IndexError, ValueError) as e:
            print(f"\033[91mB·ªè qua file l·ªói ({e}): {filename}\033[0m")
            continue
    
    print("-" * 55)
    print(f"{'T·ªïng c·ªông':<20} | {total_weeks:<5} | {total_hours:<7.1f} | {total_tasks:<8}")
    if total_weeks > 0:
        avg_hours_per_week = total_hours / total_weeks
        avg_tasks_per_week = total_tasks / total_weeks
        print(f"{'Trung b√¨nh/tu·∫ßn':<20} | {'':<5} | {avg_hours_per_week:<7.1f} | {avg_tasks_per_week:<8.1f}")
    print("=========================")

# --- Menu and Main Execution ---

MENU_OPTIONS = {
    "1": ("T·∫°o nh·∫≠t k√Ω tu·∫ßn m·ªõi", create_weekly_log),
    "2": ("ƒê·ªçc nh·∫≠t k√Ω tu·∫ßn", read_weekly_log),
    "3": ("C·∫≠p nh·∫≠t nh·∫≠t k√Ω tu·∫ßn", update_weekly_log),
    "4": ("X√≥a nh·∫≠t k√Ω tu·∫ßn", delete_weekly_log),
    "5": ("T·∫°o b√°o c√°o t·ªïng k·∫øt", generate_summary),
    "6": ("Tho√°t", None)  # None for exit action
}

def display_menu():
    """Hi·ªÉn th·ªã menu ch√≠nh."""
    print("\n\033[1;36m====== QU·∫¢N L√ù NH·∫¨T K√ù TU·∫¶N L√ÄM VI·ªÜC ======\033[0m") # Cyan color for title
    for key, (text, _) in MENU_OPTIONS.items():
        print(f"  {key}. {text}")
    print("=============================================")

def main():
    """Menu ch√≠nh ƒëi·ªÅu khi·ªÉn ch∆∞∆°ng tr√¨nh."""
    while True:
        display_menu()
        choice = input("Ch·ªçn ch·ª©c nƒÉng (1-6): ")

        if choice in MENU_OPTIONS:
            text, action = MENU_OPTIONS[choice]
            if action:
                action() # Call the corresponding function
            else: # Exit option
                print("\033[1;32mC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh! H·∫πn g·∫∑p l·∫°i.\033[0m")
                break
        else:
            print("\033[91mL·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë t·ª´ 1 ƒë·∫øn 6.\033[0m")

if __name__ == "__main__":
    main()